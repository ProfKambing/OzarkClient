package me.trambled.ozark.ozarkclient.module.exploit;

import me.trambled.ozark.ozarkclient.module.Category;
import me.trambled.ozark.ozarkclient.module.Module;
import me.trambled.ozark.ozarkclient.module.Setting;
import me.trambled.ozark.ozarkclient.util.misc.MessageUtil;
import me.trambled.ozark.ozarkclient.util.world.BlockInteractionHelper;
import me.trambled.ozark.ozarkclient.util.world.TimerUtil;
import net.minecraft.block.*;
import net.minecraft.entity.Entity;
import net.minecraft.entity.item.EntityItem;
import net.minecraft.entity.item.EntityXPOrb;
import net.minecraft.init.Blocks;
import net.minecraft.item.ItemBlock;
import net.minecraft.item.ItemStack;
import net.minecraft.network.play.client.CPacketEntityAction;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Vec3d;
import net.minecraft.world.GameType;

// credit to xulu
// gay module will delete later
public class Burrow extends Module {
    public Burrow() {
        super(Category.EXPLOIT);
        this.name        = "Burrow";
        this.tag         = "Burrow";
        this.description = "Lags you into a block.";
    }

    Setting rotate = create("Rotate", "BurrowRotate", true);
    Setting no_glitch_blocks = create("Anti GhostBlocks", "BurrowAntiGhostBlocks", true);
    Setting delay = create("Delay", "BurrowDelay", 160, 0, 1000);
    Setting strength = create("Strength", "BurrowStrength", 4, 0, 25);


    TimerUtil timer = new TimerUtil();
    int lastHotbarSlot;
    int playerHotbarSlot;
    boolean isSneaking;


    @Override
    protected void enable() {
        final BlockPos pos = new BlockPos(mc.player.posX, mc.player.posY, mc.player.posZ);
        if (mc.player == null) {
            return;
        }
        if (mc.isSingleplayer()) {
            MessageUtil.send_client_error_message("You are in singleplayer!");
            this.set_disable();
            return;
        }

        if (BlockInteractionHelper.isInterceptedByOther(pos)) {
            MessageUtil.send_client_error_message("Intercepted by entity!");
            set_disable();
            return;
        }

        if (!mc.world.getBlockState(pos.add(0, 1, 0)).getBlock().equals(Blocks.AIR) || !mc.world.getBlockState(pos.add(0, 2, 0)).getBlock().equals(Blocks.AIR) || !mc.world.getBlockState(pos.add(0, 3, 0)).getBlock().equals(Blocks.AIR)) {
            MessageUtil.send_client_error_message("Not enough space!");
            this.set_disable();
            return;
        }

        this.playerHotbarSlot = mc.player.inventory.currentItem;

        this.lastHotbarSlot = -1;
        mc.player.jump();
        this.timer.reset();

    }

    @Override
    protected void disable() {
        if (mc.player == null) {
            return;
        }
        if (this.lastHotbarSlot != this.playerHotbarSlot && this.playerHotbarSlot != -1) {
            mc.player.inventory.currentItem = this.playerHotbarSlot;
        }
        if (this.isSneaking) {
            mc.player.connection.sendPacket(new CPacketEntityAction(mc.player, CPacketEntityAction.Action.STOP_SNEAKING));
            this.isSneaking = false;
        }
        this.playerHotbarSlot = -1;
        this.lastHotbarSlot = -1;
    }

    @Override
    public void update() {
            if (this.timer.passed(this.delay.get_value(1))) {
                final BlockPos offsetPos = new BlockPos(0, -1, 0);
                final BlockPos targetPos = new BlockPos(mc.player.getPositionVector()).add(offsetPos.getX(), offsetPos.getY(), offsetPos.getZ());
                if (this.placeBlock(targetPos)) {
                    if (this.lastHotbarSlot != this.playerHotbarSlot && this.playerHotbarSlot != -1) {
                        mc.player.inventory.currentItem = this.playerHotbarSlot;
                        this.lastHotbarSlot = this.playerHotbarSlot;
                    }
                    if (this.isSneaking) {
                        mc.player.connection.sendPacket(new CPacketEntityAction(mc.player, CPacketEntityAction.Action.STOP_SNEAKING));
                        this.isSneaking = false;
                    }
                    mc.player.onGround = false;
                    mc.player.motionY = strength.get_value(1);
                }
                this.set_disable();
            }
    }

    private boolean placeBlock(final BlockPos pos) {
        final Block block = mc.world.getBlockState(pos).getBlock();
        if (!(block instanceof BlockAir) && !(block instanceof BlockLiquid)) {
            return false;
        }
        for (final Entity entity : mc.world.getEntitiesWithinAABBExcludingEntity(null, new AxisAlignedBB(pos))) {
            if (!(entity instanceof EntityItem) && !(entity instanceof EntityXPOrb)) {
                return false;
            }
        }
        final EnumFacing side = BlockInteractionHelper.getPlaceableSide(pos);
        if (side == null) {
            return false;
        }
        final BlockPos neighbour = pos.offset(side);
        final EnumFacing opposite = side.getOpposite();
        if (!BlockInteractionHelper.canBeClicked(neighbour)) {
            return false;
        }
        final Vec3d hitVec = new Vec3d(neighbour).add(0.5, 0.5, 0.5).add(new Vec3d(opposite.getDirectionVec()).scale(0.5));
        final Block neighbourBlock = mc.world.getBlockState(neighbour).getBlock();
        final int obiSlot = find_in_hotbar();
        if (obiSlot == -1) {
            MessageUtil.send_client_error_message("No obby!");
            this.set_disable();
        }
        if (this.lastHotbarSlot != obiSlot) {
            mc.player.inventory.currentItem = obiSlot;
            this.lastHotbarSlot = obiSlot;
        }
        if ((!this.isSneaking && BlockInteractionHelper.blackList.contains(neighbourBlock)) || BlockInteractionHelper.shulkerList.contains(neighbourBlock)) {
            mc.player.connection.sendPacket(new CPacketEntityAction(mc.player, CPacketEntityAction.Action.START_SNEAKING));
            this.isSneaking = true;
        }
        if (this.rotate.get_value(true)) {
            BlockInteractionHelper.faceVectorPacketInstant(hitVec);
        }
        mc.playerController.processRightClickBlock(mc.player, mc.world, neighbour, opposite, hitVec, EnumHand.MAIN_HAND);
        mc.player.swingArm(EnumHand.MAIN_HAND);
        mc.rightClickDelayTimer = 4;
        if (this.no_glitch_blocks.get_value(true) && !mc.playerController.getCurrentGameType().equals(GameType.CREATIVE)) {
            mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK, neighbour, opposite));
        }
        return true;
    }

    private int find_in_hotbar() {

        for (int i = 0; i < 9; ++i) {

            final ItemStack stack = mc.player.inventory.getStackInSlot(i);

            if (stack != ItemStack.EMPTY && stack.getItem() instanceof ItemBlock) {

                final Block block = ((ItemBlock) stack.getItem()).getBlock();

                if (block instanceof BlockEnderChest)
                    return i;

                else if (block instanceof BlockObsidian)
                    return i;

            }
        }
        return -1;
    }
}
